import { ErrorType, QueryType, ResponseNote, ResponseType, TermType } from './proto/enums';
export declare type DeepPartial<T> = T | {
    [P in keyof T]?: T[P] extends Array<infer U1> ? Array<DeepPartial<U1>> : T[P] extends ReadonlyArray<infer U2> ? ReadonlyArray<DeepPartial<U2>> : DeepPartial<T[P]>;
};
export declare type TermJson = ComplexTermJson | string | number | boolean | object | null;
export declare type OptargsJson = Record<string, unknown> | undefined;
export interface ComplexTermJson extends Array<TermType | TermJson[] | OptargsJson> {
    0: TermType;
    1?: TermJson[];
    2?: OptargsJson;
}
export declare type QueryJson = [QueryType, TermJson?, OptargsJson?];
export interface ResponseJson {
    t: ResponseType;
    r: any[];
    n: ResponseNote[];
    e?: ErrorType;
    p?: any;
    b?: Array<number | string>;
}
