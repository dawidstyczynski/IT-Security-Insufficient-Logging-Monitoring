/// <reference types="node" />
import { EventEmitter } from 'events';
import { TermJson } from '../internal-types';
import { Cursor } from '../response/cursor';
import { Connection, RServerConnectionOptions, RunOptions, ServerInfo } from '../types';
import { RethinkDBSocket } from './socket';
export declare class RethinkDBConnection extends EventEmitter implements Connection {
    private connectionOptions;
    clientPort: number;
    clientAddress: string;
    readonly socket: RethinkDBSocket;
    private options;
    private timeout;
    private pingInterval;
    private silent;
    private log;
    private pingTimer?;
    private db;
    constructor(connectionOptions: RServerConnectionOptions, { db, user, password, timeout, pingInterval, silent, log, }?: {
        db?: string | undefined;
        user?: string | undefined;
        password?: string | undefined;
        timeout?: number | undefined;
        pingInterval?: number | undefined;
        silent?: boolean | undefined;
        log?: ((message: string) => undefined) | undefined;
    });
    eventNames(): string[];
    get open(): boolean;
    get numOfQueries(): number;
    close({ noreplyWait }?: {
        noreplyWait?: boolean | undefined;
    }): Promise<void>;
    reconnect(options?: {
        noreplyWait: boolean;
    }): Promise<this>;
    use(db: string): void;
    noreplyWait(): Promise<void>;
    server(): Promise<ServerInfo>;
    query(term: TermJson, options?: RunOptions): Promise<Cursor | undefined>;
    private findTableTermAndAddDb;
    private startPinging;
    private stopPinging;
    private reportError;
}
