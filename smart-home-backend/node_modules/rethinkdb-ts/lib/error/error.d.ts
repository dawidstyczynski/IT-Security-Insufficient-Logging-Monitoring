import { RethinkDBErrorType } from '../types';
import { QueryJson, TermJson } from '../internal-types';
import { ErrorType, ResponseType } from '../proto/enums';
export interface RethinkDBErrorArgs {
    cause?: Error;
    type?: RethinkDBErrorType;
    errorCode?: number;
    term?: TermJson;
    query?: QueryJson;
    backtrace?: Array<number | string>;
    responseType?: ResponseType;
    responseErrorType?: ErrorType;
}
export declare class RethinkDBError extends Error {
    msg: string;
    readonly cause: Error | undefined;
    readonly type: RethinkDBErrorType;
    private term?;
    private backtrace?;
    constructor(msg: string, { cause, type, term, query, errorCode, backtrace, responseErrorType, }?: RethinkDBErrorArgs);
    addBacktrace({ term, query, backtrace, }?: {
        term?: TermJson;
        query?: QueryJson;
        backtrace?: [string, string];
    }): void;
}
export declare function isRethinkDBError(error: unknown): error is RethinkDBError;
