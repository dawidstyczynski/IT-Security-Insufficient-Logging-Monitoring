"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateTerm = void 0;
const error_1 = require("../error/error");
const enums_1 = require("../proto/enums");
function validateTerm(term) {
    if (term === undefined) {
        throw new error_1.RethinkDBError(`Invalid term:\n${JSON.stringify(term)}\n`);
    }
    if (typeof term === 'function') {
        throw new error_1.RethinkDBError(`Invalid term:\n${term.toString()}\n`);
    }
    if (typeof term === 'object') {
        if (Array.isArray(term)) {
            if (term.length > 3) {
                throw new error_1.RethinkDBError(`Invalid term:\n${JSON.stringify(term)}\n`);
            }
            const [func, args, options] = term;
            if (typeof func !== 'number' || enums_1.TermType[func] === undefined) {
                throw new error_1.RethinkDBError(`Invalid term:\n${JSON.stringify(term)}\n`);
            }
            if (args !== undefined) {
                if (!Array.isArray(args)) {
                    throw new error_1.RethinkDBError(`Invalid term:\n${JSON.stringify(term)}\n`);
                }
                if (!args.every((arg) => validateTerm(arg))) {
                    throw new error_1.RethinkDBError(`Invalid term:\n${JSON.stringify(term)}\n`);
                }
            }
            if (options !== undefined &&
                !Object.values(term).every((value) => validateTerm(value))) {
                throw new error_1.RethinkDBError(`Invalid term:\n${JSON.stringify(term)}\n`);
            }
        }
        else if (!Object.values(term).every((value) => validateTerm(value))) {
            throw new error_1.RethinkDBError(`Invalid term:\n${JSON.stringify(term)}\n`);
        }
    }
    return term;
}
exports.validateTerm = validateTerm;
