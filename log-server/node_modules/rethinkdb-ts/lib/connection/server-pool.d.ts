/// <reference types="node" />
import { EventEmitter } from 'events';
import { TermJson } from '../internal-types';
import { Cursor } from '../response/cursor';
import { ConnectionPool, RConnectionOptions, RServerConnectionOptions, RunOptions } from '../types';
import { RethinkDBConnection } from './connection';
import { RNConnOpts } from './socket';
export declare class ServerConnectionPool extends EventEmitter implements ConnectionPool {
    readonly server: RNConnOpts;
    private draining;
    private healthy;
    private buffer;
    private max;
    private timeoutError;
    private timeoutGb;
    private maxExponent;
    private silent;
    private log;
    private connParam;
    private connections;
    private timers;
    constructor(connectionOptions: RServerConnectionOptions, { db, user, password, buffer, max, timeout, pingInterval, timeoutError, timeoutGb, maxExponent, silent, log, }?: RConnectionOptions);
    eventNames(): string[];
    initConnections(): Promise<void>;
    get isHealthy(): boolean;
    waitForHealthy(this: ServerConnectionPool): Promise<ServerConnectionPool>;
    setOptions({ buffer, max, silent, log, timeoutError, timeoutGb, maxExponent, }: RConnectionOptions): Promise<void>;
    drain(emit?: boolean): Promise<void>;
    getConnections(): RethinkDBConnection[];
    getLength(): number;
    getAvailableLength(): number;
    getNumOfRunningQueries(): number;
    queue(term: TermJson, globalArgs?: RunOptions): Promise<Cursor | undefined>;
    private setHealthy;
    private createConnection;
    private subscribeToConnection;
    private closeConnection;
    private checkIdle;
    private removeIdleTimer;
    private persistConnection;
    private reportError;
    private getOpenConnections;
    private getIdleConnections;
}
