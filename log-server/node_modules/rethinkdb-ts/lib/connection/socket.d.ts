/// <reference types="node" />
import { EventEmitter } from 'events';
import { Socket } from 'net';
import { RServerConnectionOptions } from '../types';
import { QueryJson, ResponseJson } from '../internal-types';
import { DataQueue } from './data-queue';
export declare type RNConnOpts = RServerConnectionOptions & {
    host: string;
    port: number;
};
export declare function setConnectionDefaults(connectionOptions: RServerConnectionOptions): RNConnOpts;
export declare class RethinkDBSocket extends EventEmitter {
    connectionOptions: RNConnOpts;
    readonly user: string;
    readonly password: Buffer;
    lastError?: Error;
    get status(): "open" | "closed" | "errored" | "handshake";
    socket?: Socket;
    runningQueries: Map<number, {
        query: QueryJson;
        data: DataQueue<ResponseJson | Error>;
    }>;
    private isOpen;
    private nextToken;
    private buffer;
    private mode;
    constructor({ connectionOptions, user, password, }: {
        connectionOptions: RNConnOpts;
        user?: string;
        password?: string;
    });
    connect(): Promise<void>;
    sendQuery(newQuery: QueryJson, token?: number): number;
    stopQuery(token: number): void;
    continueQuery(token: number): void;
    readNext<T = ResponseJson>(token: number): Promise<T>;
    close(error?: Error): void;
    private performHandshake;
    private handleHandshakeData;
    private handleData;
    private handleError;
}
