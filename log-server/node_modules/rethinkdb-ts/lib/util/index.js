"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.snakeToCamel = exports.isPromise = exports.isObject = exports.isNativeError = exports.isFunction = exports.isDate = exports.delay = exports.camelToSnake = void 0;
/**
 * Returns true if the given object is a Function. Otherwise, returns false.
 */
// eslint-disable-next-line @typescript-eslint/ban-types
const isFunction = (value) => typeof value === 'function';
exports.isFunction = isFunction;
const objectToString = (o) => Object.prototype.toString.call(o);
/**
 * Returns true if the given object is strictly an Object and not a Function
 * (even though functions are objects in JavaScript). Otherwise, returns false.
 */
// eslint-disable-next-line @typescript-eslint/ban-types
const isObject = (value) => value !== null && typeof value === 'object';
exports.isObject = isObject;
function delay(timeInMs) {
    return new Promise((resolve) => {
        setTimeout(resolve, timeInMs);
    });
}
exports.delay = delay;
function snakeToCamel(name) {
    return name.replace(/(_[a-z])/g, (x) => x.charAt(1).toUpperCase());
}
exports.snakeToCamel = snakeToCamel;
function camelToSnake(name) {
    return name.replace(/([A-Z])/g, (x) => `_${x.toLowerCase()}`);
}
exports.camelToSnake = camelToSnake;
const isDate = (arg) => isObject(arg) && objectToString(arg) === '[object Date]';
exports.isDate = isDate;
const isNativeError = (arg) => isObject(arg) &&
    (objectToString(arg) === '[object Error]' || arg instanceof Error);
exports.isNativeError = isNativeError;
function isPromise(obj) {
    return (obj !== null && typeof obj === 'object' && typeof obj.then === 'function');
}
exports.isPromise = isPromise;
